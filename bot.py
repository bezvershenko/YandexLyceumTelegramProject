from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton

import requests

from maps_api.request import geocoder_request, map_request
from maps_api.geocoder import get_pos, get_bbox, get_country_code, get_city, check_response
from maps_api.static import get_static_map

from news_parser.parser import parse_news

from weather.weather import get_current_weather, get_forecast_weather

from schedule_api.airports import airs
from schedule_api.schedule import get_flights

from speech_api.speech_analyze import speech_analyze
from speech_api.xml_parser import speech_parser

from headhunter_api.suggestions import specialization_suggest, keywords_suggest, region_suggest
from headhunter_api import vacancies_request, full_vacancy_request

from config import TELEGRAM_TOKEN, SPEECH_TOKEN, WEATHER_TOKEN

import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

keyboard1 = [['‚Ü™Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
keyboard2 = [['üó∫–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ'], ['üóû–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'], ['üåß–ü–æ–≥–æ–¥–∞'], ['üõ©–†–∞—Å–ø–∏—Å–∞–Ω–∏—è'], ['üí∏–í–∞–∫–∞–Ω—Å–∏–∏'],
             ['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
keyboard3 = [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
keyboard4 = [['üå§–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞'], ['‚òîÔ∏è–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –¥–Ω–µ–π'], ['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
keyboard5 = [['‚úàÔ∏è–ù–∞–π—Ç–∏ –∞–≤–∏–∞—Ä–µ–π—Å'], ['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
keyboard6 = [['üìö–°–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞'], ['üë§–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∞–∫–∞–Ω—Å–∏–π'], ['‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–∞–∫–∞–Ω—Å–∏–π']]
keyboard7 = [['üìã–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'], ['üî†–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'], ['üåÜ–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–∞'], ['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]

inline_news_state1 = InlineKeyboardMarkup(
    [[InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å‚ñ∂Ô∏è', callback_data=1)], [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]])

inline_news_state2 = InlineKeyboardMarkup([
    [InlineKeyboardButton('‚óÄÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å', callback_data=2),
     InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å‚ñ∂Ô∏è', callback_data=1)],
    [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
])

inline_news_state3 = InlineKeyboardMarkup([
    [InlineKeyboardButton('‚óÄÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å', callback_data=2)],
    [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
])

inline_maps = InlineKeyboardMarkup([
    [InlineKeyboardButton('üó∫–ö–∞—Ä—Ç–∞', callback_data='map')],
    [InlineKeyboardButton('üõ∞–°–ø—É—Ç–Ω–∏–∫', callback_data='sat')],
    [InlineKeyboardButton('üó∫‚ûïüõ∞–ì–∏–±—Ä–∏–¥', callback_data='sat,skl')],
])

inline_sch_state1 = InlineKeyboardMarkup(
    [[InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–π—Å‚ñ∂Ô∏è', callback_data=1)], [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]])

inline_sch_state2 = InlineKeyboardMarkup([
    [InlineKeyboardButton('‚óÄÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–π—Å', callback_data=2),
     InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–π—Å‚ñ∂Ô∏è', callback_data=1)],
    [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
])

inline_sch_state3 = InlineKeyboardMarkup([
    [InlineKeyboardButton('‚èÆ–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–π—Å', callback_data=2)],
    [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
])


def start(bot, update):
    update.message.reply_text(
        '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?', reply_markup=ReplyKeyboardMarkup(keyboard1), one_time_keyboard=False)

    return ENTER_NAME


def enter_name(bot, update, user_data):
    name = update.message.text
    if name != '‚Ü™Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_data['username'] = name
    else:
        user_data['username'] = None

    user_data['vacancy'] = {
        'region_name': None,
        'region_id': None,
        'specialization_name': None,
        'specialization_id': None,
        'keywords': None
    }

    update.message.reply_text('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –∂–∏–≤–µ—Ç–µ?')
    return ENTER_LOCATION


def enter_location(bot, update, user_data):
    location = update.message.text

    if location != '‚Ü™Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        user_data['location'] = location

        suggests = region_suggest(location)
        user_data['region_suggests'] = suggests

        if len(suggests) != 0:
            location_keyboard = [['‚Ü™Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
            for suggestion in suggests:
                location_keyboard.append([suggestion])

            update.message.reply_text(
                '–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É.\n'
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.',
                reply_markup=ReplyKeyboardMarkup(location_keyboard)
            )

            return LOCATION_APPLY

        update.message.reply_text(
            '–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ —Ä–µ–≥–∏–æ–Ω–æ–≤.'
        )

    else:
        user_data['location'] = None

    name = ', {}'.format(user_data['username']) if user_data['username'] is not None else ''
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{}!'.format(name), reply_markup=ReplyKeyboardMarkup(keyboard6))

    return MAIN_MENU


def location_apply(bot, update, user_data):
    text = update.message.text

    if text in user_data['region_suggests']:
        user_data['location'] = text
        user_data['vacancy']['region_name'] = text
        user_data['vacancy']['region_id'] = user_data['region_suggests'][text]
        update.message.reply_text(
            '–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!'
        )

    elif text != '‚Ü™Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        update.message.reply_text(
            '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –µ—â—ë —Ä–∞–∑.'
        )
        return LOCATION_APPLY

    name = ', {}'.format(user_data['username']) if user_data['username'] is not None else ''
    update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å{}!'.format(name), reply_markup=ReplyKeyboardMarkup(keyboard6))
    return MAIN_MENU


def main_menu(bot, update, user_data):
    text = update.message.text

    if text == 'üìö–°–µ—Ä–≤–∏—Å—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞':
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å',
            reply_markup=ReplyKeyboardMarkup(keyboard3)
        )
        return SEARCH_HANDLER

    elif text == 'üë§–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –≤–∞–∫–∞–Ω—Å–∏–π':
        region = user_data['vacancy']['region_name']
        if region is None:
            if user_data['location'] is None:
                region = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                region = '–£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö HeadHunter'

        spec = user_data['vacancy']['specialization_name']
        if spec is None: spec = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        keywords = user_data['vacancy']['keywords']
        if keywords is None: keywords = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

        update.message.reply_text(
            '–ì–æ—Ä–æ–¥: {}\n'
            '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {}\n'
            '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {}\n'.format(
                region, spec, keywords
            )
        )

    elif text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–∞–∫–∞–Ω—Å–∏–π':
        update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    return MAIN_MENU


def profile_config(bot, update, user_data):
    text = update.message.text

    if text == 'üìã–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏':
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.\n'
            '–ë–æ—Ç –ø–æ–ø—Ä–æ–±—É–µ—Ç –Ω–∞–π—Ç–∏ —Å—Ö–æ–∂–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö HeadHunter.',
            reply_markup=ReplyKeyboardMarkup(keyboard3)
        )
        return SPECIALIZATION_CONFIG

    elif text == 'üî†–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤':
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π',
            reply_markup=ReplyKeyboardMarkup(keyboard3)
        )
        return KEYWORDS_CONFIG

    elif text == 'üåÜ–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–∞':
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é',
                                  reply_markup=ReplyKeyboardMarkup(keyboard1))
        return ENTER_LOCATION

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text('–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=ReplyKeyboardMarkup(keyboard6))
        return MAIN_MENU

    return PROFILE_CONFIG


def specialization_config(bot, update, user_data):
    text = update.message.text
    suggests = specialization_suggest(text)

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    if len(suggests) != 0:
        user_data['spec_suggests'] = suggests

        spec_keyboard = [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
        for suggestion in suggests:
            spec_keyboard.append([suggestion])

        update.message.reply_text(
            '–ë–æ—Ç –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ö–æ–∂–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö',
            reply_markup=ReplyKeyboardMarkup(spec_keyboard)
        )

        return SPECIALIZATION_APPLY

    else:
        update.message.reply_text(
            '–ù–µ –Ω–∞—à–ª–æ—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π, —Å—Ö–æ–∂–∏—Ö —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑.'
        )
        return SPECIALIZATION_CONFIG


def specialization_apply(bot, update, user_data):
    text = update.message.text

    if text in user_data['spec_suggests']:
        user_data['vacancy']['specialization_name'] = text
        user_data['vacancy']['specialization_id'] = user_data['spec_suggests'][text]
        update.message.reply_text(
            '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    else:
        update.message.reply_text(
            '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—â—ë —Ä–∞–∑.'
        )

    return SPECIALIZATION_APPLY


def keywords_config(bot, update, user_data):
    text = update.message.text
    suggests = keywords_suggest(text)

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    if len(suggests) != 0:
        user_data['keywords_suggests'] = suggests

        keywords_keyboard = [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥']]
        for suggestion in suggests:
            keywords_keyboard.append([suggestion])

        update.message.reply_text(
            '–ë–æ—Ç –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ö–æ–∂–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö',
            reply_markup=ReplyKeyboardMarkup(keywords_keyboard)
        )

        return KEYWORDS_APPLY

    else:
        user_data['vacancy']['keywords'] = text
        update.message.reply_text(
            '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )

    return PROFILE_CONFIG


def keywords_apply(bot, update, user_data):
    text = update.message.text

    if text in user_data['keywords_suggests']:
        user_data['vacancy']['keywords'] = text
        update.message.reply_text(
            '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            reply_markup=ReplyKeyboardMarkup(keyboard7)
        )
        return PROFILE_CONFIG

    else:
        update.message.reply_text(
            '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—â—ë —Ä–∞–∑.'
        )

    return KEYWORDS_APPLY


def search_handler(bot, update, user_data):
    text = update.message.text

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup(keyboard6)
        )
        return MAIN_MENU

    response = geocoder_request(geocode=text, format='json')

    if check_response(response):
        update.message.reply_text(
            '–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            reply_markup=ReplyKeyboardMarkup(keyboard2)
        )
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        user_data['current_response'] = response
        return LOCATION_HANDLER
    update.message.reply_text('–ó–∞–¥–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    return SEARCH_HANDLER


def voice_to_text(bot, update, user_data):
    voice = update.message.voice.get_file()
    file = requests.get(voice.file_path).content
    response = speech_analyze(SPEECH_TOKEN, file)

    text = speech_parser(response)
    data = geocoder_request(geocode=text, format='json')

    if check_response(data):
        update.message.reply_text(
            '–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            reply_markup=ReplyKeyboardMarkup(keyboard2)
        )
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        user_data['current_response'] = data
        return LOCATION_HANDLER

    update.message.reply_text('–ü–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

    return SEARCH_HANDLER


def location_handler(bot, update, user_data):
    text = update.message.text

    if text == 'üó∫–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ':
        res = "[‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã]({}){}".format(get_static_map(user_data),
                                           '–ö–∞—Ä—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ' + get_city(user_data['current_response'], 'ru-RU'))
        update.message.reply_text(res, parse_mode='markdown', reply_markup=inline_maps)

    elif text == 'üóû–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏':
        news = parse_news(user_data['current_response'])
        if news is not None:
            user_data['array'] = news
            user_data['index'] = 0
            user_data['length'] = len(news)
            update.message.reply_text('–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ: {}'.format(len(news)),
                                      reply_markup=ReplyKeyboardRemove())
            update.message.reply_text('*{0}*\n{1}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ:]({2})'.format(*news[0]), parse_mode='markdown',
                                      reply_markup=inline_news_state1)
            return NEWS_HANDLER

        else:
            update.message.reply_text('–ù–æ–≤–æ—Å—Ç–µ–π –¥–ª—è —ç—Ç–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    elif text == 'üåß–ü–æ–≥–æ–¥–∞':
        update.message.reply_text(
            '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–µ {}?'.format(get_city(user_data['current_response'], 'ru-RU')),
            reply_markup=ReplyKeyboardMarkup(keyboard4))
        return WEATHER_HANDLER

    elif text == 'üõ©–†–∞—Å–ø–∏—Å–∞–Ω–∏—è':
        update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:',
            reply_markup=ReplyKeyboardMarkup(keyboard5))
        return RASP_HANDLER

    elif text == 'üí∏–í–∞–∫–∞–Ω—Å–∏–∏':
        try:
            data = geocoder_request(geocode=get_city(user_data['current_response']), format='json')
            city = get_city(data, 'ru_RU')
            region = list(region_suggest(city).items())[0][1]

        except:
            update.message.reply_text(
                '–î–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö HeadHunter.',
                reply_markup=ReplyKeyboardMarkup(keyboard2)
            )
            return LOCATION_HANDLER

        try:
            user_data['vacancies_response'] = vacancies_request(area=region)['items']
            if len(user_data['vacancies_response']) == 0:
                update.message.reply_text(
                    '–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.',
                    reply_markup=ReplyKeyboardMarkup(keyboard2)
                )
                return LOCATION_HANDLER

            user_data['vacancies_index'] = 0
            user_data['vacancies_image'] = 'logo'

            update.message.reply_text('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π', reply_markup=ReplyKeyboardRemove())
            _keyboard = [
                [InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è‚ñ∂Ô∏è', callback_data=1)],
                [InlineKeyboardButton('üó∫–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data=4)],
                [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
            ]

            if len(user_data['vacancies_response']) == 1:
                _keyboard.pop(0)

            reply = form_vacancy_reply(user_data)
            if reply['address'] == '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω':
                _keyboard.pop(1)

            update.message.reply_text('–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π', reply_markup=ReplyKeyboardRemove())
            update.message.reply_text(
                (
                    '*{title}*\n'
                    '{experience}\n'
                    '{address}\n'
                    '[–ü–æ–¥—Ä–æ–±–Ω–µ–µ:]({url})\n'
                    '[‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã]({image_url})'  # EMPTY STRING IN BRACKETS
                ).format(**reply),
                parse_mode='markdown',
                reply_markup=InlineKeyboardMarkup(_keyboard)
            )

            return VACANCIES_HANDLER

        except Exception as e:
            logger.exception(e)

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å',
            reply_markup=ReplyKeyboardMarkup(keyboard3)
        )
        return SEARCH_HANDLER

    return LOCATION_HANDLER


def scrolling_vacancy(bot, update, user_data):
    query = update.callback_query
    try:
        if query.data == '1':
            if user_data['vacancies_index'] != len(user_data['vacancies_response']) - 1:
                user_data['vacancies_index'] += 1

        elif query.data == '2':
            if user_data['vacancies_index'] != 0:
                user_data['vacancies_index'] -= 1

        elif query.data == '3':
            bot.deleteMessage(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id
            )

            bot.send_message(
                query.message.chat_id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                reply_markup=ReplyKeyboardMarkup(keyboard2)
            )

            return LOCATION_HANDLER

        elif query.data == '4':
            user_data['vacancies_image'] = 'location'

        elif query.data == '5':
            user_data['vacancies_image'] = 'logo'

        keyboard = [
            [],
            [],
            [InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data=3)]
        ]

        if user_data['vacancies_index'] != 0:
            keyboard[0].append(InlineKeyboardButton(
                '‚óÄÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è', callback_data=2
            ))

        if user_data['vacancies_index'] != len(user_data['vacancies_response']) - 1:
            keyboard[0].append(InlineKeyboardButton(
                '–°–ª–µ–¥—É—é—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è‚ñ∂Ô∏è', callback_data=1
            ))

        reply = form_vacancy_reply(
            user_data,
            user_data['vacancies_image'] == 'location'
        )

        if reply['address'] != '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω':
            if user_data['vacancies_image'] == 'location':
                keyboard[1].append(InlineKeyboardButton('üé´–õ–æ–≥–æ—Ç–∏–ø', callback_data=5))
            else:
                keyboard[1].append(InlineKeyboardButton('üó∫–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data=4))

        bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id,
            text=(
                '*{title}*\n'
                '{experience}\n'
                '{address}\n'
                '[‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã]({image_url})'  # EMPTY STRING IN BRACKETS
                '[–ü–æ–¥—Ä–æ–±–Ω–µ–µ:]({url})\n'
            ).format(**reply),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='markdown'
        )

        return VACANCIES_HANDLER
    except Exception as e:
        logger.exception(e)


def form_vacancy_reply(user_data, add_location_image=False):
    vacancy_id = user_data['vacancies_response'][user_data['vacancies_index']]['id']
    vacancy = full_vacancy_request(vacancy_id)

    title = vacancy['name']
    experience = vacancy['experience']['name']
    address = vacancy['address']
    if address is not None:
        address = address['city'] + ', ' + address['street'] + ' ' + address['building']
    else:
        address = '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'

    vacancy_url = vacancy['alternate_url']

    if add_location_image:
        if vacancy['address'] is not None:
            pos = vacancy['address']['lng'], vacancy['address']['lat']
            image_url = map_request(
                ll='{},{}'.format(*pos),
                pt='{},{},pm2rdm'.format(*pos),
                l='map'
            )
        else:
            if vacancy['employer']['logo_urls'] is not None:
                image_url = vacancy['employer']['logo_urls']['original']
            else:
                image_url = ''
    else:
        if vacancy['employer']['logo_urls'] is not None:
            image_url = vacancy['employer']['logo_urls']['original']
        else:
            image_url = ''

    return {
        'title': title,
        'experience': experience,
        'address': address,
        'url': vacancy_url,
        'image_url': image_url
    }


def scrolling_news(bot, update, user_data):
    query = update.callback_query
    d = {0: inline_news_state1, user_data['length'] - 1: inline_news_state3}
    if query.data == '1':
        user_data['index'] = min(user_data['length'], user_data['index'] + 1)

    elif query.data == '2':
        user_data['index'] = max(0, user_data['index'] - 1)

    elif query.data == '3':
        bot.deleteMessage(chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
        bot.send_message(query.message.chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                         reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER
    try:
        bot.edit_message_text(text='*{0}*\n{1}\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ:]({2})'.format(*user_data['array'][user_data['index']]),
                              chat_id=query.message.chat_id,
                              message_id=query.message.message_id, parse_mode='markdown',
                              reply_markup=d[user_data['index']] if user_data['index'] in d else inline_news_state2)
    except IndexError:
        if user_data['index'] < 0:
            user_data['index'] = 0

        else:
            user_data['index'] = user_data['length'] - 1


def choosing_map_type(bot, update, user_data):
    query = update.callback_query
    bot.edit_message_text(chat_id=query.message.chat_id, message_id=query.message.message_id,
                          text="[‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã]({}){}".format(get_static_map(user_data, query.data),
                                                            '–ö–∞—Ä—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ' + get_city(
                                                                user_data['current_response'], 'ru-RU')),
                          parse_mode='markdown', reply_markup=inline_maps)


def enter_the_map(bot, update):
    text = update.message.text
    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        return LOCATION_HANDLER


def weather(bot, update, user_data):
    text = update.message.text

    if text == 'üå§–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞':
        city, code = get_city(user_data['current_response']), get_country_code(user_data['current_response'])
        update.message.reply_text(
            get_current_weather(city, code, WEATHER_TOKEN, get_city(user_data['current_response'], 'ru-RU')))

    elif text == '‚òîÔ∏è–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –¥–Ω–µ–π':
        city, code = get_city(user_data['current_response']), get_country_code(user_data['current_response'])
        update.message.reply_text(
            get_forecast_weather(city, code, WEATHER_TOKEN, get_city(user_data['current_response'], 'ru-RU')))

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER


def schedule(bot, update, user_data):
    text = update.message.text

    if text == '‚úàÔ∏è–ù–∞–π—Ç–∏ –∞–≤–∏–∞—Ä–µ–π—Å':
        city_ru, city_en = get_city(user_data['current_response'], 'ru_RU'), get_city(user_data['current_response'])
        airports = airs.get(city_ru, []) + airs.get(city_en, [])

        if airports:
            airport_question(update, city_ru, city_en)
            return SET_SECOND_CITY_HANDLER

        else:
            update.message.reply_text(
                '–í –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    elif text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER


def set_second_city(bot, update, user_data):
    text = update.message.text

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:',
            reply_markup=ReplyKeyboardMarkup(keyboard5))
        return RASP_HANDLER

    elif text == 'üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER

    else:
        user_data['airport1'] = text.split(', ')[-1]
        update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard3 + [['üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']]))
        return SET_SECOND_AIRPORT_HANDLER


def set_second_airport(bot, update, user_data):
    text = update.message.text

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        city_ru, city_en = get_city(user_data['current_response'], 'ru_RU'), get_city(user_data['current_response'])
        airport_question(update, city_ru, city_en)
        return SET_SECOND_CITY_HANDLER

    elif text == 'üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER

    else:
        response = geocoder_request(geocode=text, format='json')
        if check_response(response):
            user_data['city2'] = get_city(response, 'ru_RU')
            city_en = get_city(response)
            airports = airs.get(user_data['city2'], []) + airs.get(city_en, [])
            if not airports:
                update.message.reply_text('–í–≤–µ–¥–µ–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.')
                return SET_SECOND_AIRPORT_HANDLER
            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç –ø—Ä–∏–±—ã—Ç–∏—è:',
                                      reply_markup=ReplyKeyboardMarkup(
                                          [[elem[1] + ', ' + elem[0]] for elem in airports] + [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'],
                                                                                               ['üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']]))
            return FIND_FLIGHTS_HANDLER
        update.message.reply_text('–í–≤–µ–¥–µ–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.')


def find_flights(bot, update, user_data):
    text = update.message.text

    if text == 'üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        city_ru, city_en = get_city(user_data['current_response'], 'ru_RU'), get_city(user_data['current_response'])
        airport_question(update, city_ru, city_en)
        return SET_SECOND_CITY_HANDLER

    elif text == 'üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:',
                                  reply_markup=ReplyKeyboardMarkup(keyboard2))

        return LOCATION_HANDLER

    else:
        airport2 = text.split(', ')[-1]
        flights = get_flights(user_data['airport1'], airport2)
        if not flights:
            update.message.reply_text('–†–µ–π—Å–æ–≤ –º–µ–∂–¥—É —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞–Ω–µ–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
            city_ru, city_en = get_city(user_data['current_response'], 'ru_RU'), get_city(user_data['current_response'])
            airport_question(update, city_ru, city_en)
            return SET_SECOND_CITY_HANDLER

        user_data['array'] = flights
        user_data['index'] = 0
        user_data['length'] = len(flights)
        update.message.reply_text('–ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {}'.format(len(flights)),
                                  reply_markup=ReplyKeyboardRemove())
        update.message.reply_text(flights[0],
                                  reply_markup=inline_sch_state1 if len(flights) > 1 else ReplyKeyboardMarkup(
                                      keyboard3))


def scrolling_flights(bot, update, user_data):
    print(user_data['array'])
    query = update.callback_query
    d = {0: inline_sch_state1, user_data['length'] - 1: inline_sch_state3}
    if query.data == '1':
        user_data['index'] = min(user_data['length'], user_data['index'] + 1)

    elif query.data == '2':
        user_data['index'] = max(0, user_data['index'] - 1)

    elif query.data == '3':
        bot.deleteMessage(chat_id=query.message.chat_id,
                          message_id=query.message.message_id)
        city_ru, city_en = get_city(user_data['current_response'], 'ru_RU'), get_city(user_data['current_response'])
        airports = airs.get(city_ru, []) + airs.get(city_en, [])
        bot.sendMessage(text='–ò–∑ –∫–∞–∫–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞ {} –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ–π—Å?'.format(city_ru),
                        chat_id=query.message.chat_id,
                        reply_markup=ReplyKeyboardMarkup(
                            [[elem[1] + ', ' + elem[0]] for elem in airports] + [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'],
                                                                                 ['üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']]))
        return SET_SECOND_CITY_HANDLER

    try:
        bot.edit_message_text(text=user_data['array'][user_data['index']],
                              chat_id=query.message.chat_id,
                              message_id=query.message.message_id, parse_mode='markdown',
                              reply_markup=d[user_data['index']] if user_data['index'] in d else inline_sch_state2)
    except IndexError:
        if user_data['index'] < 0:
            user_data['index'] = 0

        else:
            user_data['index'] = user_data['length'] - 1


def airport_question(update, city_ru, city_en):
    airports = airs.get(city_ru, []) + airs.get(city_en, [])
    update.message.reply_text('–ò–∑ –∫–∞–∫–æ–≥–æ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞ {} –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ä–µ–π—Å?'.format(city_ru),
                              reply_markup=ReplyKeyboardMarkup(
                                  [[elem[1] + ', ' + elem[0]] for elem in airports] + [['üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'],
                                                                                       ['üîö–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']]))


def stop(bot, update):
    update.message.reply_text('–ü–æ–∫–∞!', reply_markup=ReplyKeyboardRemove())
    update.message.reply_text('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
    return ConversationHandler.END


def error(bot, update, error):
    logger.warning('Update "%s" caused error "%s"', update, error)


def main():
    updater = Updater(TELEGRAM_TOKEN)

    dp = updater.dispatcher
    dp.add_error_handler(error)
    dp.add_handler(conversation_handler)

    updater.start_polling()
    updater.idle()


(
    ENTER_NAME, ENTER_LOCATION, SEARCH_HANDLER, LOCATION_HANDLER,
    LOCATION_APPLY, MAIN_MENU, PROFILE_CONFIG, SPECIALIZATION_CONFIG,
    SPECIALIZATION_APPLY, KEYWORDS_CONFIG, KEYWORDS_APPLY,
    VACANCIES_HANDLER, NEWS_HANDLER, WEATHER_HANDLER, RASP_HANDLER,
    SET_SECOND_CITY_HANDLER, SET_SECOND_AIRPORT_HANDLER,
    FIND_FLIGHTS_HANDLER
) = range(18)

conversation_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],

    states={
        ENTER_NAME: [MessageHandler(Filters.text, enter_name, pass_user_data=True)],
        ENTER_LOCATION: [MessageHandler(Filters.text, enter_location, pass_user_data=True)],
        LOCATION_APPLY: [MessageHandler(Filters.text, location_apply, pass_user_data=True)],

        MAIN_MENU: [MessageHandler(Filters.text, main_menu, pass_user_data=True)],

        PROFILE_CONFIG: [MessageHandler(Filters.text, profile_config, pass_user_data=True)],

        SPECIALIZATION_CONFIG: [MessageHandler(Filters.text, specialization_config, pass_user_data=True)],
        SPECIALIZATION_APPLY: [MessageHandler(Filters.text, specialization_apply, pass_user_data=True)],

        KEYWORDS_CONFIG: [MessageHandler(Filters.text, keywords_config, pass_user_data=True)],
        KEYWORDS_APPLY: [MessageHandler(Filters.text, keywords_apply, pass_user_data=True)],

        SEARCH_HANDLER: [
            MessageHandler(Filters.text, search_handler, pass_user_data=True),
            MessageHandler(Filters.voice, voice_to_text, pass_user_data=True)
        ],

        LOCATION_HANDLER: [
            MessageHandler(Filters.text, location_handler, pass_user_data=True),
            CallbackQueryHandler(choosing_map_type, pass_user_data=True),
        ],

        NEWS_HANDLER: [
            CallbackQueryHandler(scrolling_news, pass_user_data=True)
        ],

        VACANCIES_HANDLER: [
            CallbackQueryHandler(scrolling_vacancy, pass_user_data=True)
        ],

        WEATHER_HANDLER: [
            MessageHandler(Filters.text, weather, pass_user_data=True)
        ],

        RASP_HANDLER: [
            MessageHandler(Filters.text, schedule, pass_user_data=True)
        ],

        SET_SECOND_CITY_HANDLER: [
            MessageHandler(Filters.text, set_second_city, pass_user_data=True)
        ],

        SET_SECOND_AIRPORT_HANDLER: [
            MessageHandler(Filters.text, set_second_airport, pass_user_data=True)
        ],

        FIND_FLIGHTS_HANDLER: [
            MessageHandler(Filters.text, find_flights, pass_user_data=True),
            CallbackQueryHandler(scrolling_flights, pass_user_data=True),
        ]
    },

    fallbacks=[CommandHandler('stop', stop)]
)

if __name__ == '__main__':
    main()
